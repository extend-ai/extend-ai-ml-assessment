{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"create.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOxdK3qyTqX5lG6SOr1Uav6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"kGVNnsACs5qi"},"source":["import os\n","import json\n","import argparse\n","import numpy as np\n","import random\n","import math\n","from PIL import Image, ImageEnhance\n","\n","# Entrypoint Args\n","parser = argparse.ArgumentParser(description='Create synthetic training data for object detection algorithms.')\n","parser.add_argument(\"-bkg\", \"--backgrounds\", type=str, default=\"Backgrounds/\",\n","                    help=\"Path to background images folder.\")\n","parser.add_argument(\"-obj\", \"--objects\", type=str, default=\"Objects/\",\n","                    help=\"Path to object images folder.\")\n","parser.add_argument(\"-o\", \"--output\", type=str, default=\"TrainingImages/\",\n","                    help=\"Path to output images folder.\")\n","parser.add_argument(\"-ann\", \"--annotate\", type=bool, default=False,\n","                    help=\"Include annotations in the data augmentation steps?\")\n","parser.add_argument(\"-s\", \"--sframe\", type=bool, default=False,\n","                    help=\"Convert dataset to an sframe?\")\n","parser.add_argument(\"-g\", \"--groups\", type=bool, default=False,\n","                    help=\"Include groups of objects in training set?\")\n","parser.add_argument(\"-mut\", \"--mutate\", type=bool, default=False,\n","                    help=\"Perform mutatuons to objects (rotation, brightness, shapness, contrast)\")\n","args = parser.parse_args()\n","\n","\n","# Prepare data creation pipeline\n","base_bkgs_path = args.backgrounds\n","bkg_images = [f for f in os.listdir(base_bkgs_path) if not f.startswith(\".\")]\n","objs_path = args.objects\n","obj_images = [f for f in os.listdir(objs_path) if not f.startswith(\".\")]\n","sizes = [0.4, 0.6, 0.8, 1, 1.2] # different obj sizes to use TODO make configurable\n","count_per_size = 4 # number of locations for each obj size TODO make configurable\n","annotations = [] # store annots here\n","output_images = args.output\n","n = 1\n","\n","\n","# Helper functions\n","def get_obj_positions(obj, bkg, count=1):\n","    obj_w, obj_h = [], []\n","    x_positions, y_positions = [], []\n","    bkg_w, bkg_h = bkg.size\n","    # Rescale our obj to have a couple different sizes\n","    obj_sizes = [tuple([int(s*x) for x in obj.size]) for s in sizes]\n","    for w, h in obj_sizes:\n","        obj_w.extend([w]*count)\n","        obj_h.extend([h]*count)\n","        max_x, max_y = bkg_w-w, bkg_h-h\n","        x_positions.extend(list(np.random.randint(0, max_x, count)))\n","        y_positions.extend(list(np.random.randint(0, max_y, count)))\n","    return obj_h, obj_w, x_positions, y_positions\n","\n","\n","def get_box(obj_w, obj_h, max_x, max_y):\n","    x1, y1 = np.random.randint(0, max_x, 1), np.random.randint(0, max_y, 1)\n","    x2, y2 = x1 + obj_w, y1 + obj_h\n","    return [x1[0], y1[0], x2[0], y2[0]]\n","\n","\n","# check if two boxes intersect\n","def intersects(box, new_box):\n","    box_x1, box_y1, box_x2, box_y2 = box\n","    x1, y1, x2, y2 = new_box\n","    return not (box_x2 < x1 or box_x1 > x2 or box_y1 > y2 or box_y2 < y1)\n","\n","\n","def get_group_obj_positions(obj_group, bkg):\n","    bkg_w, bkg_h = bkg.size\n","    boxes = []\n","    objs = [Image.open(objs_path + obj_images[i]) for i in obj_group]\n","    obj_sizes = [tuple([int(0.6*x) for x in i.size]) for i in objs]\n","    for w, h in obj_sizes:\n","        # set background image boundaries\n","        max_x, max_y = bkg_w-w, bkg_h-h\n","        # get new box coordinates for the obj on the bkg\n","        while True:\n","            new_box = get_box(w, h, max_x, max_y)\n","            for box in boxes:\n","                res = intersects(box, new_box)\n","                if res:\n","                    break\n","\n","            else:\n","                break  # only executed if the inner loop did NOT break\n","            #print(\"retrying a new obj box\")\n","            continue  # only executed if the inner loop DID break\n","        # append our new box\n","        boxes.append(new_box)\n","    return obj_sizes, boxes\n","    \n","def mutate_image(img):\n","    # resize image for random value\n","    resize_rate = random.choice(sizes)\n","    img = img.resize([int(img.width*resize_rate), int(img.height*resize_rate)], Image.BILINEAR)\n","\n","    # rotate image for random andle and generate exclusion mask \n","    rotate_angle = random.randint(0,360)\n","    mask = Image.new('L', img.size, 255)\n","    img = img.rotate(rotate_angle, expand=True)\n","    mask = mask.rotate(rotate_angle, expand=True)\n","\n","\n","    # perform some enhancements on image\n","    enhancers = [ImageEnhance.Brightness, ImageEnhance.Color, ImageEnhance.Contrast, ImageEnhance.Sharpness]\n","    enhancers_count = random.randint(0,3)\n","    for i in range(0,enhancers_count):\n","        enhancer = random.choice(enhancers)\n","        enhancers.remove(enhancer)\n","        img = enhancer(img).enhance(random.uniform(0.5,1.5))\n","\n","    return img, mask\n","\n","\n","if __name__ == \"__main__\":\n","\n","    # Make synthetic training data\n","    print(\"Making synthetic images.\", flush=True)\n","    for bkg in bkg_images:\n","        # Load the background image\n","        bkg_path = base_bkgs_path + bkg\n","        bkg_img = Image.open(bkg_path)\n","        bkg_x, bkg_y = bkg_img.size\n","\n","        # Do single objs first\n","        for i in obj_images:\n","            # Load the single obj\n","            i_path = objs_path + i\n","            obj_img = Image.open(i_path)\n","            \n","\n","            # Get an array of random obj positions (from top-left corner)\n","            obj_h, obj_w, x_pos, y_pos = get_obj_positions(obj=obj_img, bkg=bkg_img, count=count_per_size)            \n","            \n","\n","            # Create synthetic images based on positions\n","            for h, w, x, y in zip(obj_h, obj_w, x_pos, y_pos):\n","                # Copy background\n","                bkg_w_obj = bkg_img.copy()\n","                \n","                if args.mutate:\n","                    new_obj, mask = mutate_image(obj_img)\n","                    # Paste on the obj\n","                    bkg_w_obj.paste(new_obj, (x, y), mask)\n","                else:\n","                    # Adjust obj size\n","                    new_obj = obj_img.resize(size=(w, h))\n","                    # Paste on the obj\n","                    bkg_w_obj.paste(new_obj, (x, y))\n","                output_fp = output_images + str(n) + \".png\"\n","                # Save the image\n","                bkg_w_obj.save(fp=output_fp, format=\"png\")\n","\n","                if args.annotate:\n","                    # Make annotation\n","                    ann = [{'coordinates': {'height': h, 'width': w, 'x': x+(0.5*w), 'y': y+(0.5*h)}, 'label': i.split(\".png\")[0]}]\n","                    # Save the annotation data\n","                    annotations.append({\n","                        \"path\": output_fp,\n","                        \"annotations\": ann\n","                    })\n","                #print(n)\n","                n += 1\n","\n","        if args.groups:\n","            # 24 Groupings of 2-4 objs together on a single background\n","            groups = [np.random.randint(0, len(obj_images) -1, np.random.randint(2, 5, 1)) for r in range(2*len(obj_images))]\n","            # For each group of objs\n","            for group in groups:\n","                # Get sizes and positions\n","                ann = []\n","                obj_sizes, boxes = get_group_obj_positions(group, bkg_img)\n","                bkg_w_obj = bkg_img.copy()\n","\n","                # For each obj in the group\n","                for i, size, box in zip(group, obj_sizes, boxes):\n","                    # Get the obj\n","                    obj = Image.open(objs_path + obj_images[i])\n","                    obj_w, obj_h = size\n","                    # Resize it as needed\n","                    new_obj = obj.resize((obj_w, obj_h))\n","                    x_pos, y_pos = box[:2]\n","                    if args.annotate:\n","                        # Add obj annotations\n","                        annot = {\n","                                'coordinates': {\n","                                    'height': obj_h,\n","                                    'width': obj_w,\n","                                    'x': int(x_pos+(0.5*obj_w)),\n","                                    'y': int(y_pos+(0.5*obj_h))\n","                                },\n","                                'label': obj_images[i].split(\".png\")[0]\n","                            }\n","                        ann.append(annot)\n","                    # Paste the obj to the background\n","                    bkg_w_obj.paste(new_obj, (x_pos, y_pos))\n","\n","                output_fp = output_images + str(n) + \".png\"\n","                # Save image\n","                bkg_w_obj.save(fp=output_fp, format=\"png\")\n","                if args.annotate:\n","                    # Save annotation data\n","                    annotations.append({\n","                        \"path\": output_fp,\n","                        \"annotations\": ann\n","                    })\n","                #print(n)\n","                n += 1\n","\n","    if args.annotate:\n","        print(\"Saving out Annotations\", flush=True)\n","        # Save annotations\n","        with open(\"annotations.json\", \"w\") as f:\n","            f.write(json.dumps(annotations))\n","\n","    if args.sframe:\n","        print(\"Saving out SFrame\", flush=True)\n","        # Write out data to an sframe for turicreate training\n","        import turicreate as tc\n","        # Load images and annotations to sframes\n","        images = tc.load_images(output_images).sort(\"path\")\n","        annots = tc.SArray(annotations).unpack(column_name_prefix=None).sort(\"path\")\n","        # Join\n","        images = images.join(annots, how='left', on='path')\n","        # Save out sframe\n","        images[['image', 'path', 'annotations']].save(\"training_data.sframe\")\n","\n","    total_images = len([f for f in os.listdir(output_images) if not f.startswith(\".\")])\n","    print(\"Done! Created {} synthetic training images.\".format(total_images), flush=True)"],"execution_count":null,"outputs":[]}]}